import { motion } from 'framer-motion';
import { forwardRef } from 'react';
import { useTranslation } from 'react-i18next';

import FirstRibbonLines from '@/shared/assets/imgs/first-ribbon-lines-image.png';
import FirstRibbonLinesLg from '@/shared/assets/imgs/new-apply-lines-lg.png';
import DottedArrow from '@/shared/components/ui/dot-arrow';
import SectionHiga from '@/shared/components/ui/section-higa';
import clsx from 'clsx';

interface Props {
  onViewportEnter: () => void;
}

// =======================
// i18n-like texts
// =======================
const TEXT = {
  section: {
    badge: 'Как принять участие',
    title: '3 шага до участия',
    description: '',
    // '4 часа интенсивной работы с реальными кейсами и современными AI-инструментами.\nМалые группы по 15–20 человек, персональная работа с тренерами..',
  },
  items: [
    {
      index: 1,
      label: 'Прийти на адрес форума в назначенный день мероприятия',
    },
    {
      index: 2,
      label:
        'г. Астана, Сатпаева, 2, Евразийский национальный университет им. Л.Н. Гумилева',
    },
    {
      index: 3,
      label:
        'Посещение форума осуществляется по входному билету стоимостью 5 000 тенге. Оплата производится при входе.',
    },
  ] as { index: number; label: string }[],
} as const;

const dGuide =
  'M101.071 111.896L101.018 110.397L101.071 111.896ZM82.3545 70.7982L83.5424 71.7141L82.3545 70.7982ZM179.307 157.918L179.341 156.419L179.307 157.918ZM327.366 127.969C327.708 127.214 327.373 126.325 326.619 125.984L314.321 120.414C313.566 120.073 312.678 120.407 312.336 121.162C311.994 121.917 312.329 122.805 313.083 123.147L324.015 128.098L319.064 139.029C318.723 139.783 319.057 140.672 319.812 141.014C320.567 141.356 321.455 141.021 321.797 140.266L327.366 127.969ZM-35 1L-36.4983 1.07174C-36.4201 2.70524 -36.2966 4.32643 -36.1294 5.93491L-34.6375 5.77981L-33.1455 5.62471C-33.307 4.07142 -33.4262 2.50582 -33.5017 0.928264L-35 1ZM-33.1226 15.2241L-34.5884 15.5429C-33.8957 18.7275 -33.0323 21.8545 -32.0112 24.9206L-30.588 24.4466L-29.1649 23.9727C-30.1529 21.0058 -30.9876 17.9824 -31.6569 14.9053L-33.1226 15.2241ZM-27.1026 33.3558L-28.4702 33.972C-27.1411 36.922 -25.6665 39.8071 -24.0596 42.6242L-22.7566 41.881L-21.4537 41.1377C-23.0152 38.4003 -24.4463 35.5999 -25.735 32.7397L-27.1026 33.3558ZM-17.6515 49.9713L-18.8842 50.826C-17.0486 53.4735 -15.0963 56.0516 -13.04 58.5575L-11.8804 57.6059L-10.7209 56.6544C-12.7278 54.2088 -14.6311 51.6951 -16.4188 49.1167L-17.6515 49.9713ZM-5.53486 64.7685L-6.62023 65.8038C-4.39954 68.1318 -2.08935 70.3868 0.298397 72.5661L1.30957 71.4581L2.32074 70.3502C-0.0175819 68.2161 -2.27814 66.0094 -4.44948 63.7331L-5.53486 64.7685ZM8.58608 77.6754L7.64872 78.8464C10.1631 80.859 12.7426 82.7942 15.3758 84.6492L16.2397 83.4229L17.1035 82.1967C14.5193 80.3761 11.9888 78.4777 9.52344 76.5043L8.58608 77.6754ZM24.2232 88.701L23.4329 89.9759C26.1783 91.6777 28.9665 93.2957 31.7859 94.8269L32.5018 93.5088L33.2177 92.1906C30.4482 90.6864 27.7096 89.0973 25.0135 87.4261L24.2232 88.701ZM41.0356 97.8337L40.3959 99.1905C43.3314 100.575 46.2877 101.865 49.252 103.059L49.8123 101.668L50.3727 100.276C47.4621 99.104 44.5589 97.8366 41.6753 96.477L41.0356 97.8337ZM58.7879 104.976L58.3118 106.399C61.4083 107.435 64.5004 108.363 67.574 109.178L67.9586 107.729L68.3433 106.279C65.3328 105.48 62.3016 104.571 59.2641 103.554L58.7879 104.976ZM77.2924 109.865L77.0098 111.339C80.2436 111.959 83.4406 112.447 86.583 112.796L86.7487 111.305L86.9145 109.814C83.8543 109.474 80.7354 108.999 77.5751 108.392L77.2924 109.865ZM96.2882 111.934L96.2609 113.434C97.9039 113.464 99.5257 113.451 101.123 113.395L101.071 111.896L101.018 110.397C99.4755 110.451 97.9072 110.463 96.3156 110.434L96.2882 111.934ZM101.071 111.896L101.123 113.395C102.997 113.329 104.793 113.213 106.512 113.05L106.37 111.557L106.229 110.064C104.572 110.221 102.836 110.333 101.018 110.397L101.071 111.896ZM116.719 109.786L117.1 111.237C121.002 110.213 124.346 108.863 127.169 107.245L126.423 105.944L125.677 104.642C123.116 106.111 120.024 107.369 116.338 108.335L116.719 109.786ZM134.234 99.0658L135.458 99.9329C137.741 96.7087 138.954 93.1316 139.27 89.459L137.775 89.3303L136.281 89.2015C136.008 92.3748 134.967 95.4356 133.01 98.1988L134.234 99.0658ZM136.34 79.0048L137.755 78.5065C136.565 75.1263 134.755 71.872 132.476 68.9307L131.29 69.8494L130.105 70.7681C132.202 73.4747 133.85 76.4479 134.925 79.503L136.34 79.0048ZM123.737 62.6086L124.603 61.3836C121.612 59.2703 118.287 57.6107 114.754 56.5927L114.339 58.0341L113.923 59.4754C117.105 60.3923 120.129 61.896 122.871 63.8337L123.737 62.6086ZM103.944 57.1332L103.771 55.6432C100.292 56.0466 96.7741 57.1409 93.3216 59.0486L94.0471 60.3615L94.7726 61.6744C97.8886 59.9526 101.032 58.981 104.117 58.6232L103.944 57.1332ZM85.7773 66.8194L84.6981 65.7776C83.4975 67.0215 82.3188 68.3878 81.1666 69.8823L82.3545 70.7982L83.5424 71.7141C84.6306 70.3027 85.737 69.021 86.8566 67.8611L85.7773 66.8194ZM82.3545 70.7982L81.1666 69.8823C80.1091 71.2539 79.1688 72.636 78.3424 74.0272L79.632 74.7933L80.9215 75.5595C81.6833 74.2772 82.555 72.9948 83.5424 71.7141L82.3545 70.7982ZM75.9553 83.6967L74.4966 83.347C73.6892 86.7143 73.4844 90.0842 73.8145 93.4248L75.3072 93.2773L76.7999 93.1298C76.5017 90.1118 76.6869 87.0784 77.4139 84.0465L75.9553 83.6967ZM77.663 102.599L76.2722 103.16C77.4777 106.144 79.0724 109.07 80.9971 111.921L82.2403 111.082L83.4835 110.242C81.6606 107.542 80.1706 104.801 79.0537 102.037L77.663 102.599ZM88.2611 118.629L87.1586 119.646C89.316 121.984 91.6863 124.259 94.2353 126.459L95.2153 125.323L96.1952 124.188C93.7237 122.055 91.4365 119.858 89.3636 117.612L88.2611 118.629ZM102.808 131.28L101.935 132.5C104.538 134.364 107.265 136.159 110.092 137.874L110.87 136.592L111.648 135.31C108.883 133.631 106.219 131.878 103.682 130.061L102.808 131.28ZM119.293 141.319L118.603 142.651C121.471 144.138 124.41 145.545 127.398 146.866L128.004 145.494L128.61 144.121C125.678 142.826 122.795 141.445 119.983 139.987L119.293 141.319ZM136.95 149.126L136.428 150.533C139.486 151.668 142.573 152.709 145.668 153.647L146.103 152.212L146.538 150.776C143.503 149.856 140.474 148.835 137.472 147.72L136.95 149.126ZM155.431 154.714L155.09 156.175C158.304 156.925 161.505 157.555 164.669 158.055L164.903 156.573L165.137 155.092C162.048 154.603 158.919 153.988 155.772 153.254L155.431 154.714ZM174.486 157.687L174.378 159.183C176.028 159.303 177.661 159.381 179.273 159.418L179.307 157.918L179.341 156.419C177.781 156.383 176.197 156.307 174.594 156.191L174.486 157.687ZM179.307 157.918L179.273 159.418C180.866 159.454 182.449 159.479 184.022 159.491L184.034 157.991L184.045 156.491C182.488 156.479 180.919 156.455 179.341 156.419L179.307 157.918ZM193.469 157.92L193.503 159.42C196.704 159.347 199.86 159.226 202.97 159.06L202.89 157.563L202.81 156.065C199.73 156.229 196.605 156.349 193.435 156.421L193.469 157.92ZM212.31 156.914L212.436 158.409C215.63 158.14 218.773 157.825 221.866 157.468L221.694 155.978L221.523 154.488C218.459 154.841 215.347 155.153 212.184 155.42L212.31 156.914ZM231.042 154.755L231.259 156.239C234.437 155.774 237.558 155.267 240.624 154.724L240.362 153.247L240.1 151.77C237.064 152.308 233.972 152.81 230.825 153.271L231.042 154.755ZM249.629 151.461L249.934 152.93C253.081 152.276 256.164 151.586 259.185 150.867L258.837 149.408L258.49 147.949C255.496 148.661 252.441 149.344 249.323 149.993L249.629 151.461ZM267.985 147.097L268.372 148.546C271.484 147.715 274.524 146.857 277.491 145.982L277.067 144.543L276.642 143.104C273.698 143.973 270.683 144.823 267.597 145.648L267.985 147.097ZM286.081 141.765L286.54 143.194C289.616 142.206 292.608 141.207 295.514 140.207L295.026 138.789L294.538 137.37C291.649 138.364 288.678 139.357 285.623 140.337L286.081 141.765ZM303.928 135.637L304.441 137.047C307.499 135.936 310.452 134.838 313.3 133.766L312.772 132.362L312.244 130.958C309.403 132.027 306.461 133.122 303.416 134.227L303.928 135.637ZM321.6 129.016L322.133 130.418C323.632 129.848 325.097 129.293 326.529 128.754L326 127.35L325.471 125.946C324.036 126.487 322.568 127.044 321.067 127.614L321.6 129.016Z';

const Items = TEXT.items;

const ApplyBlock = forwardRef<HTMLDivElement, Props>(
  ({ onViewportEnter }, ref) => {
    const { t } = useTranslation('homePage');
    const isDesktop = window.innerWidth >= 768;

    const listItems = (text: string, index: number) => {
      return (
        <div className={clsx('flex items-center gap-2', 'md:gap-6')}>
          <div
            className={clsx(
              'flex aspect-square h-8 w-8 flex-col items-center justify-center gap-[10px] p-[10px]',
              'md:h-[84px] md:w-[84px] md:flex-row md:rounded-[20px] md:bg-[#544BC8]'
            )}
          >
            <span
              className={clsx(
                'text-stroke text-center text-[17px] leading-[22px] font-semibold tracking-[-0.408px] text-transparent',
                'md:text-[64px] md:font-bold md:tracking-[0.37px]'
              )}
              style={{ WebkitTextStroke: '3px #7268E7' }}
            >
              {index}
            </span>
          </div>
          <span
            className={clsx(
              'text-left text-[16px] leading-[21px] font-normal tracking-[-0.32px] text-white',
              'md:text-[22px] md:leading-[1.34] md:tracking-[0.37px]'
            )}
          >
            {text}
          </span>
        </div>
      );
    };

    return (
      <motion.section
        ref={ref}
        onViewportEnter={onViewportEnter}
        viewport={{ amount: 0.005 }}
        className={clsx(
          'bg-bg-primary relative h-[calc(80vh)] w-full overflow-hidden',
          'md:h-[100vh] md:min-h-[800px]'
        )}
      >
        <div
          className={clsx(
            'absolute top-0 right-0 z-5 flex h-full w-full flex-col items-center gap-6 self-stretch px-2 py-8',
            'md:mt-[100px]'
          )}
        >
          <SectionHiga
            badgeText={TEXT.section.badge}
            title={TEXT.section.title}
            description={TEXT.section.description}
          />

          <img
            src={isDesktop ? FirstRibbonLinesLg : FirstRibbonLines}
            alt=""
            className={clsx(
              'absolute top-[-107.352px] left-[-109.264px] aspect-[91/72] min-h-[391.214px] min-w-[527.995px] rotate-[-166.242deg]',
              'md:minh-auto md:minw-auto md:top-[-150px] md:right-0 md:left-auto md:aspect-auto md:rotate-0'
            )}
          />

          <div
            className={clsx(
              'z-10 flex flex-col items-start gap-3 self-stretch',
              'md:mt-[100px] md:gap-[-10px]'
            )}
          >
            {Items.map((item, i) => (
              <motion.div
                key={item.index}
                variants={{
                  initial: { x: '-100%', backgroundColor: '#544BC8' },
                  animated: {
                    x: !isDesktop
                      ? 0
                      : i === 0
                        ? 0
                        : i === 1
                          ? '25%'
                          : i === 2
                            ? '50%'
                            : '75%',
                    y: 0,
                    backgroundColor: 'transparent',
                  },
                  initialMobile: { y: '-100%', backgroundColor: '#544BC8' },
                }}
                initial={window.innerWidth > 1023 ? 'initial' : 'initialMobile'}
                whileInView={'animated'}
                viewport={{ once: true }}
                transition={{
                  backgroundColor: { duration: 0.8, ease: 'easeIn' },
                  x: { duration: 0.8, ease: 'easeInOut' },
                }}
                className={clsx(
                  'z-0 flex w-full flex-col justify-center gap-[1.25vw] rounded-[16px] bg-[#C7EBFF] p-[1.25vw] text-center',
                  'md:w-[50%] md:p-0'
                )}
              >
                {listItems(item.label, item.index)}
              </motion.div>
            ))}
          </div>

          <div
            className={clsx(
              'absolute bottom-[10%] left-[-35px] flex h-[157px] w-[361px]',
              'md:bottom-[200px] md:left-[-25%] md:w-full'
            )}
          >
            <DottedArrow
              className={clsx('w-full')}
              viewBox={'0 0 328 160'}
              d={dGuide}
              color="#7268E7"
              strokeWidth={3}
              dash={[6, 10]}
              duration={1.5}
              once
            />
          </div>
        </div>
      </motion.section>
    );
  }
);

export default ApplyBlock;
